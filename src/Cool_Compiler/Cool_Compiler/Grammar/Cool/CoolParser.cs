//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\School\Compilacion\Cool_Compiler\Cool_Compiler\Grammar\Cool\Cool.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CoolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		STRCTE=10, INT=11, IMPLY=12, EQUAL_AS=13, ADD=14, SUB=15, POW=16, MUL=17, 
		DIV=18, MOD=19, AND=20, OR=21, XOR=22, SLEFT=23, SRIGHT=24, LESS=25, GREAT=26, 
		EQUAL_CM=27, LESSEQ=28, GREATEQ=29, FIN=30, CLASS=31, ELSE=32, FALSE=33, 
		FI=34, IF=35, IN=36, INHERITS=37, ISVOID=38, LET=39, LOOP=40, POOL=41, 
		THEN=42, WHILE=43, CASE=44, ESAC=45, NEW=46, OF=47, NOT=48, TRUE=49, TYPE=50, 
		ID=51, WHITESPACE=52, BLOCK_COMMENT=53, LINE_COMMENT=54;
	public const int
		RULE_program = 0, RULE_classdefine = 1, RULE_feature = 2, RULE_method = 3, 
		RULE_property = 4, RULE_formal = 5, RULE_expr = 6, RULE_argexpr = 7, RULE_stamentlist = 8, 
		RULE_stament = 9, RULE_branch = 10;
	public static readonly string[] ruleNames = {
		"program", "classdefine", "feature", "method", "property", "formal", "expr", 
		"argexpr", "stamentlist", "stament", "branch"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "','", "')'", "':'", "'@'", "'.'", "'~'", null, 
		null, "'=>'", "'<-'", "'+'", "'-'", "'**'", "'*'", "'/'", "'%'", "'&'", 
		"'|'", "'^'", "'<<'", "'>>'", "'<'", "'>'", "'='", "'<='", "'>='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "STRCTE", 
		"INT", "IMPLY", "EQUAL_AS", "ADD", "SUB", "POW", "MUL", "DIV", "MOD", 
		"AND", "OR", "XOR", "SLEFT", "SRIGHT", "LESS", "GREAT", "EQUAL_CM", "LESSEQ", 
		"GREATEQ", "FIN", "CLASS", "ELSE", "FALSE", "FI", "IF", "IN", "INHERITS", 
		"ISVOID", "LET", "LOOP", "POOL", "THEN", "WHILE", "CASE", "ESAC", "NEW", 
		"OF", "NOT", "TRUE", "TYPE", "ID", "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cool.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgContext : ProgramContext {
		public StamentlistContext stamentlist() {
			return GetRuleContext<StamentlistContext>(0);
		}
		public ProgContext(ProgramContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClasslistContext : ProgramContext {
		public ClassdefineContext[] classdefine() {
			return GetRuleContexts<ClassdefineContext>();
		}
		public ClassdefineContext classdefine(int i) {
			return GetRuleContext<ClassdefineContext>(i);
		}
		public ClasslistContext(ProgramContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClasslist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case T__0:
			case T__2:
			case T__8:
			case STRCTE:
			case INT:
			case FALSE:
			case IF:
			case ISVOID:
			case LET:
			case WHILE:
			case CASE:
			case NEW:
			case NOT:
			case TRUE:
			case ID:
				_localctx = new ProgContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 22; stamentlist();
				}
				break;
			case CLASS:
				_localctx = new ClasslistContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 23; classdefine();
					State = 24; Match(FIN);
					}
					}
					State = 28;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CLASS );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassdefineContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CoolParser.CLASS, 0); }
		public ITerminalNode[] TYPE() { return GetTokens(CoolParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(CoolParser.TYPE, i);
		}
		public ITerminalNode INHERITS() { return GetToken(CoolParser.INHERITS, 0); }
		public FeatureContext[] feature() {
			return GetRuleContexts<FeatureContext>();
		}
		public FeatureContext feature(int i) {
			return GetRuleContext<FeatureContext>(i);
		}
		public ClassdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classdefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassdefineContext classdefine() {
		ClassdefineContext _localctx = new ClassdefineContext(Context, State);
		EnterRule(_localctx, 2, RULE_classdefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(CLASS);
			State = 33; Match(TYPE);
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 34; Match(INHERITS);
				State = 35; Match(TYPE);
				}
			}

			State = 38; Match(T__0);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 39; feature();
				State = 40; Match(FIN);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 47; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureContext : ParserRuleContext {
		public FeatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feature; } }
	 
		public FeatureContext() { }
		public virtual void CopyFrom(FeatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FeaturepropContext : FeatureContext {
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public FeaturepropContext(FeatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureprop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FeaturemetContext : FeatureContext {
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public FeaturemetContext(FeatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeaturemet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureContext feature() {
		FeatureContext _localctx = new FeatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_feature);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new FeaturemetContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 49; method();
				}
				break;
			case 2:
				_localctx = new FeaturepropContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; property();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FormalContext[] formal() {
			return GetRuleContexts<FormalContext>();
		}
		public FormalContext formal(int i) {
			return GetRuleContext<FormalContext>(i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 6, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(ID);
			State = 54; Match(T__2);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 55; formal();
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 56; Match(T__3);
					State = 57; formal();
					}
					}
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68; Match(T__4);
			State = 69; Match(T__5);
			State = 70; Match(TYPE);
			State = 71; Match(T__0);
			State = 72; expr(0);
			State = 73; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public FormalContext formal() {
			return GetRuleContext<FormalContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 8, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; formal();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_AS) {
				{
				State = 76; Match(EQUAL_AS);
				State = 77; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public FormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalContext formal() {
		FormalContext _localctx = new FormalContext(Context, State);
		EnterRule(_localctx, 10, RULE_formal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(ID);
			State = 81; Match(T__5);
			State = 82; Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Log_aritContext : ExprContext {
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Log_aritContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLog_arit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetContext : ExprContext {
		public ITerminalNode LET() { return GetToken(CoolParser.LET, 0); }
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public ITerminalNode IN() { return GetToken(CoolParser.IN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LetContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseofContext : ExprContext {
		public ITerminalNode CASE() { return GetToken(CoolParser.CASE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OF() { return GetToken(CoolParser.OF, 0); }
		public ITerminalNode ESAC() { return GetToken(CoolParser.ESAC, 0); }
		public BranchContext[] branch() {
			return GetRuleContexts<BranchContext>();
		}
		public BranchContext branch(int i) {
			return GetRuleContext<BranchContext>(i);
		}
		public CaseofContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseof(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		public ITerminalNode INT() { return GetToken(CoolParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsvoidContext : ExprContext {
		public ITerminalNode ISVOID() { return GetToken(CoolParser.ISVOID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IsvoidContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsvoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewtypeContext : ExprContext {
		public ITerminalNode NEW() { return GetToken(CoolParser.NEW, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public NewtypeContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewtype(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetidContext : ExprContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public GetidContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Log_negContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(CoolParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Log_negContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLog_neg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionContext : ExprContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AsignacionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BracketContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : ExprContext {
		public ITerminalNode WHILE() { return GetToken(CoolParser.WHILE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LOOP() { return GetToken(CoolParser.LOOP, 0); }
		public ITerminalNode POOL() { return GetToken(CoolParser.POOL, 0); }
		public WhileContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumsubContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SumsubContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumsub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CorpusContext : ExprContext {
		public StamentlistContext stamentlist() {
			return GetRuleContext<StamentlistContext>(0);
		}
		public CorpusContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCorpus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultdivContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultdivContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultdiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfelseContext : ExprContext {
		public ITerminalNode IF() { return GetToken(CoolParser.IF, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(CoolParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(CoolParser.ELSE, 0); }
		public ITerminalNode FI() { return GetToken(CoolParser.FI, 0); }
		public IfelseContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfelse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : ExprContext {
		public ITerminalNode IF() { return GetToken(CoolParser.IF, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(CoolParser.THEN, 0); }
		public ITerminalNode FI() { return GetToken(CoolParser.FI, 0); }
		public IfContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRCTE() { return GetToken(CoolParser.STRCTE, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DispatchContext : ExprContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ArgexprContext argexpr() {
			return GetRuleContext<ArgexprContext>(0);
		}
		public DispatchContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispatch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExprContext {
		public IToken cte;
		public ITerminalNode TRUE() { return GetToken(CoolParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CoolParser.FALSE, 0); }
		public BoolContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplicitdispatchContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ArgexprContext argexpr() {
			return GetRuleContext<ArgexprContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public ExplicitdispatchContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitdispatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new DispatchContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 85; Match(ID);
				State = 86; argexpr();
				}
				break;
			case 2:
				{
				_localctx = new IfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87; Match(IF);
				State = 88; expr(0);
				State = 89; Match(THEN);
				State = 90; expr(0);
				State = 91; Match(FI);
				}
				break;
			case 3:
				{
				_localctx = new IfelseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93; Match(IF);
				State = 94; expr(0);
				State = 95; Match(THEN);
				State = 96; expr(0);
				State = 97; Match(ELSE);
				State = 98; expr(0);
				State = 99; Match(FI);
				}
				break;
			case 4:
				{
				_localctx = new WhileContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101; Match(WHILE);
				State = 102; expr(0);
				State = 103; Match(LOOP);
				State = 104; expr(0);
				State = 105; Match(POOL);
				}
				break;
			case 5:
				{
				_localctx = new CorpusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107; Match(T__0);
				State = 108; stamentlist();
				State = 109; Match(T__1);
				}
				break;
			case 6:
				{
				_localctx = new CaseofContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 111; Match(CASE);
				State = 112; expr(0);
				State = 113; Match(OF);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 114; branch();
					State = 115; Match(FIN);
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ID );
				State = 121; Match(ESAC);
				}
				break;
			case 7:
				{
				_localctx = new NewtypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 123; Match(NEW);
				State = 124; Match(TYPE);
				}
				break;
			case 8:
				{
				_localctx = new Log_aritContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125; ((Log_aritContext)_localctx).op = Match(T__8);
				State = 126; expr(13);
				}
				break;
			case 9:
				{
				_localctx = new IsvoidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127; Match(ISVOID);
				State = 128; expr(12);
				}
				break;
			case 10:
				{
				_localctx = new Log_negContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 129; Match(NOT);
				State = 130; expr(8);
				}
				break;
			case 11:
				{
				_localctx = new BracketContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131; Match(T__2);
				State = 132; expr(0);
				State = 133; Match(T__4);
				}
				break;
			case 12:
				{
				_localctx = new GetidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 135; Match(ID);
				}
				break;
			case 13:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 136; Match(INT);
				}
				break;
			case 14:
				{
				_localctx = new BoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137;
				((BoolContext)_localctx).cte = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FALSE || _la==TRUE) ) {
					((BoolContext)_localctx).cte = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 138; Match(STRCTE);
				}
				break;
			case 16:
				{
				_localctx = new AsignacionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 139; Match(ID);
				State = 140; Match(EQUAL_AS);
				State = 141; expr(2);
				}
				break;
			case 17:
				{
				_localctx = new LetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 142; Match(LET);
				State = 143; property();
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 144; Match(T__3);
					State = 145; property();
					}
					}
					State = 150;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 151; Match(IN);
				State = 152; expr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 175;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 173;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new MultdivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 156;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 157;
						((MultdivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((MultdivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 158; expr(12);
						}
						break;
					case 2:
						{
						_localctx = new SumsubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 159;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 160;
						((SumsubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((SumsubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 161; expr(11);
						}
						break;
					case 3:
						{
						_localctx = new ComparContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 162;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 163;
						((ComparContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << EQUAL_CM) | (1L << LESSEQ))) != 0)) ) {
							((ComparContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 164; expr(10);
						}
						break;
					case 4:
						{
						_localctx = new ExplicitdispatchContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 165;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 168;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__6) {
							{
							State = 166; Match(T__6);
							State = 167; Match(TYPE);
							}
						}

						State = 170; Match(T__7);
						State = 171; Match(ID);
						State = 172; argexpr();
						}
						break;
					}
					} 
				}
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgexprContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgexprContext argexpr() {
		ArgexprContext _localctx = new ArgexprContext(Context, State);
		EnterRule(_localctx, 14, RULE_argexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(T__2);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__8) | (1L << STRCTE) | (1L << INT) | (1L << FALSE) | (1L << IF) | (1L << ISVOID) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << NOT) | (1L << TRUE) | (1L << ID))) != 0)) {
				{
				{
				State = 179; expr(0);
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 180; Match(T__3);
					State = 181; expr(0);
					}
					}
					State = 186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 192; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StamentlistContext : ParserRuleContext {
		public StamentContext[] stament() {
			return GetRuleContexts<StamentContext>();
		}
		public StamentContext stament(int i) {
			return GetRuleContext<StamentContext>(i);
		}
		public StamentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stamentlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStamentlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StamentlistContext stamentlist() {
		StamentlistContext _localctx = new StamentlistContext(Context, State);
		EnterRule(_localctx, 16, RULE_stamentlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__8) | (1L << STRCTE) | (1L << INT) | (1L << FALSE) | (1L << IF) | (1L << ISVOID) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << NOT) | (1L << TRUE) | (1L << ID))) != 0)) {
				{
				{
				State = 194; stament();
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StamentContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StamentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stament; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStament(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StamentContext stament() {
		StamentContext _localctx = new StamentContext(Context, State);
		EnterRule(_localctx, 18, RULE_stament);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; expr(0);
			State = 201; Match(FIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BranchContext : ParserRuleContext {
		public FormalContext formal() {
			return GetRuleContext<FormalContext>(0);
		}
		public ITerminalNode IMPLY() { return GetToken(CoolParser.IMPLY, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_branch; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBranch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BranchContext branch() {
		BranchContext _localctx = new BranchContext(Context, State);
		EnterRule(_localctx, 20, RULE_branch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; formal();
			State = 204; Match(IMPLY);
			State = 205; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 21);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x38', '\xD2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\x1D', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1E', 
		'\x5', '\x2', '!', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\'', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '-', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x30', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '=', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '@', '\v', '\x5', '\a', '\x5', 
		'\x42', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x45', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'Q', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x6', '\b', 'x', '\n', '\b', '\r', '\b', '\xE', '\b', 'y', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x95', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x98', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x9D', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xAB', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xB0', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\xB3', '\v', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xB9', '\n', '\t', 
		'\f', '\t', '\xE', '\t', '\xBC', '\v', '\t', '\a', '\t', '\xBE', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\xC1', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\a', '\n', '\xC6', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\xC9', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x2', '\x3', 
		'\xE', '\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x2', '\x6', '\x4', '\x2', '#', '#', '\x33', '\x33', 
		'\x3', '\x2', '\x13', '\x14', '\x3', '\x2', '\x10', '\x11', '\x4', '\x2', 
		'\x1B', '\x1B', '\x1D', '\x1E', '\x2', '\xE8', '\x2', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'M', '\x3', '\x2', '\x2', '\x2', '\f', 'R', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x10', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\x16', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '!', '\x5', '\x12', '\n', '\x2', '\x19', '\x1A', '\x5', 
		'\x4', '\x3', '\x2', '\x1A', '\x1B', '\a', ' ', '\x2', '\x2', '\x1B', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'!', '\x3', '\x2', '\x2', '\x2', ' ', '\x18', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x1C', '\x3', '\x2', '\x2', '\x2', '!', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\"', '#', '\a', '!', '\x2', '\x2', '#', '&', '\a', '\x34', '\x2', 
		'\x2', '$', '%', '\a', '\'', '\x2', '\x2', '%', '\'', '\a', '\x34', '\x2', 
		'\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '.', '\a', '\x3', 
		'\x2', '\x2', ')', '*', '\x5', '\x6', '\x4', '\x2', '*', '+', '\a', ' ', 
		'\x2', '\x2', '+', '-', '\x3', '\x2', '\x2', '\x2', ',', ')', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\a', '\x4', '\x2', '\x2', '\x32', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x36', '\x5', '\b', '\x5', '\x2', '\x34', '\x36', '\x5', 
		'\n', '\x6', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\a', '\x35', '\x2', '\x2', '\x38', '\x43', '\a', 
		'\x5', '\x2', '\x2', '\x39', '>', '\x5', '\f', '\a', '\x2', ':', ';', 
		'\a', '\x6', '\x2', '\x2', ';', '=', '\x5', '\f', '\a', '\x2', '<', ':', 
		'\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', '\x2', '>', 
		'<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x42', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x39', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', 
		'\a', '\x2', '\x2', 'G', 'H', '\a', '\b', '\x2', '\x2', 'H', 'I', '\a', 
		'\x34', '\x2', '\x2', 'I', 'J', '\a', '\x3', '\x2', '\x2', 'J', 'K', '\x5', 
		'\xE', '\b', '\x2', 'K', 'L', '\a', '\x4', '\x2', '\x2', 'L', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'P', '\x5', '\f', '\a', '\x2', 'N', 'O', '\a', 
		'\xF', '\x2', '\x2', 'O', 'Q', '\x5', '\xE', '\b', '\x2', 'P', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x35', '\x2', '\x2', 'S', 
		'T', '\a', '\b', '\x2', '\x2', 'T', 'U', '\a', '\x34', '\x2', '\x2', 'U', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\b', '\b', '\x1', '\x2', 
		'W', 'X', '\a', '\x35', '\x2', '\x2', 'X', '\x9D', '\x5', '\x10', '\t', 
		'\x2', 'Y', 'Z', '\a', '%', '\x2', '\x2', 'Z', '[', '\x5', '\xE', '\b', 
		'\x2', '[', '\\', '\a', ',', '\x2', '\x2', '\\', ']', '\x5', '\xE', '\b', 
		'\x2', ']', '^', '\a', '$', '\x2', '\x2', '^', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '_', '`', '\a', '%', '\x2', '\x2', '`', '\x61', '\x5', '\xE', '\b', 
		'\x2', '\x61', '\x62', '\a', ',', '\x2', '\x2', '\x62', '\x63', '\x5', 
		'\xE', '\b', '\x2', '\x63', '\x64', '\a', '\"', '\x2', '\x2', '\x64', 
		'\x65', '\x5', '\xE', '\b', '\x2', '\x65', '\x66', '\a', '$', '\x2', '\x2', 
		'\x66', '\x9D', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', '-', '\x2', 
		'\x2', 'h', 'i', '\x5', '\xE', '\b', '\x2', 'i', 'j', '\a', '*', '\x2', 
		'\x2', 'j', 'k', '\x5', '\xE', '\b', '\x2', 'k', 'l', '\a', '+', '\x2', 
		'\x2', 'l', '\x9D', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\x3', 
		'\x2', '\x2', 'n', 'o', '\x5', '\x12', '\n', '\x2', 'o', 'p', '\a', '\x4', 
		'\x2', '\x2', 'p', '\x9D', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', 
		'.', '\x2', '\x2', 'r', 's', '\x5', '\xE', '\b', '\x2', 's', 'w', '\a', 
		'\x31', '\x2', '\x2', 't', 'u', '\x5', '\x16', '\f', '\x2', 'u', 'v', 
		'\a', ' ', '\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 't', 
		'\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', 
		'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '/', '\x2', '\x2', 
		'|', '\x9D', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\x30', '\x2', 
		'\x2', '~', '\x9D', '\a', '\x34', '\x2', '\x2', '\x7F', '\x80', '\a', 
		'\v', '\x2', '\x2', '\x80', '\x9D', '\x5', '\xE', '\b', '\xF', '\x81', 
		'\x82', '\a', '(', '\x2', '\x2', '\x82', '\x9D', '\x5', '\xE', '\b', '\xE', 
		'\x83', '\x84', '\a', '\x32', '\x2', '\x2', '\x84', '\x9D', '\x5', '\xE', 
		'\b', '\n', '\x85', '\x86', '\a', '\x5', '\x2', '\x2', '\x86', '\x87', 
		'\x5', '\xE', '\b', '\x2', '\x87', '\x88', '\a', '\a', '\x2', '\x2', '\x88', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x89', '\x9D', '\a', '\x35', '\x2', 
		'\x2', '\x8A', '\x9D', '\a', '\r', '\x2', '\x2', '\x8B', '\x9D', '\t', 
		'\x2', '\x2', '\x2', '\x8C', '\x9D', '\a', '\f', '\x2', '\x2', '\x8D', 
		'\x8E', '\a', '\x35', '\x2', '\x2', '\x8E', '\x8F', '\a', '\xF', '\x2', 
		'\x2', '\x8F', '\x9D', '\x5', '\xE', '\b', '\x4', '\x90', '\x91', '\a', 
		')', '\x2', '\x2', '\x91', '\x96', '\x5', '\n', '\x6', '\x2', '\x92', 
		'\x93', '\a', '\x6', '\x2', '\x2', '\x93', '\x95', '\x5', '\n', '\x6', 
		'\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', 
		'&', '\x2', '\x2', '\x9A', '\x9B', '\x5', '\xE', '\b', '\x3', '\x9B', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9C', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', 'Y', '\x3', '\x2', '\x2', '\x2', '\x9C', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', 'g', '\x3', '\x2', '\x2', '\x2', '\x9C', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', 'q', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x81', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x85', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\f', '\r', '\x2', '\x2', '\x9F', '\xA0', '\t', 
		'\x3', '\x2', '\x2', '\xA0', '\xB0', '\x5', '\xE', '\b', '\xE', '\xA1', 
		'\xA2', '\f', '\f', '\x2', '\x2', '\xA2', '\xA3', '\t', '\x4', '\x2', 
		'\x2', '\xA3', '\xB0', '\x5', '\xE', '\b', '\r', '\xA4', '\xA5', '\f', 
		'\v', '\x2', '\x2', '\xA5', '\xA6', '\t', '\x5', '\x2', '\x2', '\xA6', 
		'\xB0', '\x5', '\xE', '\b', '\f', '\xA7', '\xAA', '\f', '\x17', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '\t', '\x2', '\x2', '\xA9', '\xAB', '\a', 
		'\x34', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\a', '\n', '\x2', '\x2', '\xAD', '\xAE', '\a', 
		'\x35', '\x2', '\x2', '\xAE', '\xB0', '\x5', '\x10', '\t', '\x2', '\xAF', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xF', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xBF', '\a', '\x5', '\x2', '\x2', '\xB5', 
		'\xBA', '\x5', '\xE', '\b', '\x2', '\xB6', '\xB7', '\a', '\x6', '\x2', 
		'\x2', '\xB7', '\xB9', '\x5', '\xE', '\b', '\x2', '\xB8', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\a', '\a', '\x2', '\x2', '\xC3', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC6', '\x5', '\x14', '\v', '\x2', '\xC5', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\x13', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\xE', '\b', '\x2', '\xCB', 
		'\xCC', '\a', ' ', '\x2', '\x2', '\xCC', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCE', '\x5', '\f', '\a', '\x2', '\xCE', '\xCF', '\a', 
		'\xE', '\x2', '\x2', '\xCF', '\xD0', '\x5', '\xE', '\b', '\x2', '\xD0', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x13', '\x1E', ' ', '&', '.', '\x35', 
		'>', '\x43', 'P', 'y', '\x96', '\x9C', '\xAA', '\xAF', '\xB1', '\xBA', 
		'\xBF', '\xC7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
